// /### **What is the internal database row ID?**
/* 
In your `OrderItems` table, you have an `id` column (auto-increment primary key).  
This is a unique number assigned by the database to each row, like:

| id | order_id | item_id | quantity |
|----|----------|---------|----------|
| 1  |   10     |   5     |    2     |
| 2  |   10     |   6     |    1     |
| 3  |   11     |   5     |    3     |

The `id` (1, 2, 3) is the **internal row ID**.

---

### **Why is it not always available or meaningful?**

- When you want to remove an item from an order, your business logic usually knows:
  - The **order** (`order_id`)
  - The **item** (`item_id`)
- You **don’t usually know** the `id` value for that row, because:
  - It’s generated by the database.
  - It’s not shown to users or used in your API.
  - It’s just an internal identifier.


### **Summary**

- The internal row `id` is just a database detail.
- Your business logic works with `order_id` and `item_id`—that’s what you know from your app.
- That’s why you delete using both, not the internal `id`.

---

**In short:**  
You use `order_id` and `item_id` because they match your real-world use case and API, not the database’s internal numbering.

*/


//DB notes
/*
when u but a default value to in the migrate u should meke it in the model too 
*/
